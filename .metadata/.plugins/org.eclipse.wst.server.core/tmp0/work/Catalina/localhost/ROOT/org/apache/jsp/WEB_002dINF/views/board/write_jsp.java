/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.58
 * Generated at: 2023-03-20 15:08:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class write_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/user/Documents/Server%20Programming%20Workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Spring_Motorcycle_BBS/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1678169223423L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/header.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("	");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div class=\"row\">\r\n");
      out.write("		<div class=\"col-md-10 mx-auto\">\r\n");
      out.write("			<!-- 글쓰기 영역 -->\r\n");
      out.write("			<div class=\"card\">\r\n");
      out.write("				<div class=\"card-header bg-primary pt-3\">\r\n");
      out.write("					<h3 class=\"text-white font-weight-bold\">글쓰기</h3>\r\n");
      out.write("				</div>\r\n");
      out.write("				\r\n");
      out.write("				<div class=\"card-body\">\r\n");
      out.write("					<div class=\"col-md-11 mx-auto\">\r\n");
      out.write("						<!-- 글쓰기 폼 -->\r\n");
      out.write("						<form id=\"writeForm\" action=\"/board/write\" method=\"post\" class=\"form-horizontal\" enctype=\"multipart/form-data\">\r\n");
      out.write("							<input type=\"hidden\" name=\"userNo\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.userNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/>\r\n");
      out.write("						\r\n");
      out.write("							<div class=\"row form-group justify-content-between\">\r\n");
      out.write("								<div class=\"col-md-4\">\r\n");
      out.write("									<label for=\"username\" class=\"control-label\">작성자</label>\r\n");
      out.write("									<input type=\"text\" class=\"form-control\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.userName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly required>\r\n");
      out.write("								</div>\r\n");
      out.write("								<div class=\"col-md-4\">\r\n");
      out.write("									<label for=\"category\" class=\"control-label\">지역선택</label>\r\n");
      out.write("									<select id=\"boardCategory\" class=\"selectpicker form-control\" name=\"boardCategory\" data-live-search=\"true\" required>\r\n");
      out.write("										<option value=\"\" disabled selected>카테고리</option>\r\n");
      out.write("										<!-- category 테이블에서 이름 가져와서 넣을 것 -->\r\n");
      out.write("										");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("									</select>\r\n");
      out.write("								</div>\r\n");
      out.write("							</div>\r\n");
      out.write("							<div class=\"row form-group py-4\">\r\n");
      out.write("								<div class=\"col-md-12\">\r\n");
      out.write("									\r\n");
      out.write("									<label for=\"file\" class=\"control-label\">이미지 업로드 (4개 이상 필수 선택)</label>\r\n");
      out.write("									\r\n");
      out.write("									<div class=\"card dropzone\" id=\"dropzone\" style=\"padding:5rem 0;\">\r\n");
      out.write("										<div class=\"card-body text-center\">\r\n");
      out.write("											<div class=\"dropzone-text\">파일을 선택하려면 클릭하세요.</div>\r\n");
      out.write("											<div class=\"spinner spinner-border text-primary\" role=\"status\" style=\"display:none;\"></div>\r\n");
      out.write("											<div class=\"fileList row\"></div>\r\n");
      out.write("										</div>\r\n");
      out.write("									</div>\r\n");
      out.write("									\r\n");
      out.write("									<input type=\"file\" id=\"file\" class=\"file d-none\" name=\"file[]\" multiple />\r\n");
      out.write("									\r\n");
      out.write("								</div>\r\n");
      out.write("							</div>\r\n");
      out.write("							\r\n");
      out.write("							<div class=\"form-group pb-3\">\r\n");
      out.write("								<label for=\"title\" class=\"control-label\">제목</label>\r\n");
      out.write("								<input type=\"text\" class=\"form-control\" name=\"boardTitle\" id=\"title\" placeholder=\"제목은 최대 30자 까지만 쓸 수 있습니다.\" required>\r\n");
      out.write("							</div>\r\n");
      out.write("							\r\n");
      out.write("							<div class=\"form-group pb-3\">\r\n");
      out.write("								<label for=\"content\" class=\"control-label\">본문</label>\r\n");
      out.write("								<textarea class=\"form-control\" name=\"boardContent\" id=\"content\" rows=\"10\" required style=\"resize:none;\"></textarea>\r\n");
      out.write("							</div>\r\n");
      out.write("						\r\n");
      out.write("							<div class=\"form-group pb-3\">\r\n");
      out.write("								<label for=\"price\" class=\"control-label\">가격</label>\r\n");
      out.write("								<div class=\"form-row align-items-center px-1\">\r\n");
      out.write("									<input type=\"text\" class=\"form-control text-right col-md-3\" name=\"boardPrice\" id=\"price\" placeholder=\"가격\" value=\"10,000\" required onkeydown=\"return onlyNumber(event)\" onkeyup=\"return removeChar(event)\">&nbsp;원\r\n");
      out.write("								</div>\r\n");
      out.write("							</div>\r\n");
      out.write("			\r\n");
      out.write("							<div class=\"form-group float-right\">\r\n");
      out.write("								<button type=\"submit\" class=\"btn btn-lg btn-primary\">글쓰기</button>\r\n");
      out.write("								<button type=\"button\" class=\"btn btn-lg btn-outline-dark\" onclick=\"link('/')\">취소</button>\r\n");
      out.write("							</div>\r\n");
      out.write("						</form>\r\n");
      out.write("						<!-- // 글쓰기 폼 -->\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("			<!-- // 글쓰기 영역 -->\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<div class=\"full-screen\" style=\"position:fixed; left:0; top:0; width:100%; height:100%; background-color:rgba(0, 0, 0, 0.3); display:none;\">\r\n");
      out.write("		<div class=\"spinner-border text-primary\" role=\"status\" style=\"width:5rem; height:5rem; position:absolute; left:50%; top:50%; tranform:translate(-50%, -50%)\">\r\n");
      out.write("			<span class=\"sr-only\">Wait...</span>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/script.jsp", out, false);
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("		$(function(){\r\n");
      out.write("			$(\".full-screen\").hide();\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		// 숫자만 입력할 수 있게 설정하는 함수\r\n");
      out.write("		function onlyNumber(event){\r\n");
      out.write("		    event = event || window.event;\r\n");
      out.write("		    var keyID = (event.which) ? event.which : event.keyCode;\r\n");
      out.write("\r\n");
      out.write("		    // 허용하는 키\r\n");
      out.write("		    // 위 숫자키 0 ~ 9, 넘버패드 숫자키 0 ~ 9, Backspace, Delete, 왼쪽 방향키, 오른쪽 방향키 \r\n");
      out.write("		    if ( (keyID >= 48 && keyID <= 57) || (keyID >= 96 && keyID <= 105) || keyID == 8 || keyID == 46 || keyID == 37 || keyID == 39 ) \r\n");
      out.write("		        return;\r\n");
      out.write("		    else\r\n");
      out.write("		        return false;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		// 숫자 이외의 문자가 입력될 때 문자 제거 함수\r\n");
      out.write("		function removeChar(event) {\r\n");
      out.write("		    event = event || window.event;\r\n");
      out.write("		    var keyID = (event.which) ? event.which : event.keyCode;\r\n");
      out.write("\r\n");
      out.write("		    // 허용하는 키\r\n");
      out.write("		    // Backspace, Delete, 왼쪽 방향키, 오른쪽 방향키 \r\n");
      out.write("		    if ( keyID == 8 || keyID == 46 || keyID == 37 || keyID == 39 ) \r\n");
      out.write("		        return;\r\n");
      out.write("		    else\r\n");
      out.write("			    // 허용하지 않는 키를 입력하면 문자를 숫자 이외의 문자를 빈 값으로 치환하여 다시 값을 설정\r\n");
      out.write("			    // 결론은 숫자만 남게 됨\r\n");
      out.write("		        event.target.value = event.target.value.replace(/[^0-9]/g, \"\");\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		// 셀렉트 박스 검색 기능 함수\r\n");
      out.write("		$(\"#boardCategory\").selectpicker({\r\n");
      out.write("			noneResultsText : \"찾을 수 없는 단어 : {0}\",\r\n");
      out.write("			size : 5\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		// 금액 입력 영역 키 입력 이벤트\r\n");
      out.write("		$(\"#price\").keyup(function(){\r\n");
      out.write("			var priceStr = $(this).val();\r\n");
      out.write("			var priceComma = numberWithCommas(priceStr.replaceAll(\",\", \"\"));\r\n");
      out.write("\r\n");
      out.write("			$(this).val(priceComma);\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		// 썸네일 이미지가 보여졌는지 확인하는 플래그\r\n");
      out.write("		// true = 파일 등록 가능 (파일 썸네일이 보여지고 기능이 완벽하게 종료되면 true)\r\n");
      out.write("		// false = 파일 등록 불가 (파일을 등록중 일때 false)\r\n");
      out.write("		var flag = true;\r\n");
      out.write("\r\n");
      out.write("		// 파일 선택 클릭 이벤트\r\n");
      out.write("		$(\"#dropzone\").click(function(e){\r\n");
      out.write("			if(flag){\r\n");
      out.write("				$(\"#file\").click();\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		// 파일 필드의 값이 변경됬을 때 이벤트\r\n");
      out.write("		$(\"#file\").change(function(e){\r\n");
      out.write("			var fileList = e.target.files;\r\n");
      out.write("\r\n");
      out.write("			// 파일을 선택하지 않았을 경우 레이아웃 복구\r\n");
      out.write("			if(fileList.length == 0){\r\n");
      out.write("				resetDropzone();\r\n");
      out.write("\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			if(flag){\r\n");
      out.write("				$(\".fileList\").empty();\r\n");
      out.write("				imageThumbnail(fileList);\r\n");
      out.write("				flag = true;\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		$(\"#writeForm\").ajaxForm({\r\n");
      out.write("			type : \"POST\",\r\n");
      out.write("			url : \"/board/write\",\r\n");
      out.write("			dataType : \"json\",\r\n");
      out.write("			processData : false,\r\n");
      out.write("			contentType : false,\r\n");
      out.write("			beforeSubmit : function(data, form, option){\r\n");
      out.write("				// 이미지 개수 저장 변수\r\n");
      out.write("				var stillNotUploadImageLength = $(\"#file\")[0].files.length; // 업로드 할 이미지 개수\r\n");
      out.write("\r\n");
      out.write("				// 이미지 최소 개수 제한\r\n");
      out.write("				if(stillNotUploadImageLength < 4){\r\n");
      out.write("					alert(\"이미지는 4개 이상 무조건 등록해야합니다.\");\r\n");
      out.write("					return false;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				// 제목 글자 수 제한\r\n");
      out.write("				var boardTitleValue = $(form).find(\"input[name=boardTitle]\").val();\r\n");
      out.write("				if(boardTitleValue.length > 30){\r\n");
      out.write("					alert(\"제목은 최대 30자 까지만 쓸 수 있습니다.\\n현재 글자 수 : \" + boardTitleValue.length + \"자\");\r\n");
      out.write("					return false;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				// 가격 초과 확인하는 플래그 변수\r\n");
      out.write("				var flag = false;\r\n");
      out.write("				\r\n");
      out.write("				// 콤마 처리된 문자열 데이터 정수 형식으로 치환\r\n");
      out.write("				$.each(data, function(key, val){\r\n");
      out.write("					if(val.name == \"boardPrice\"){\r\n");
      out.write("						val.value = val.value.replaceAll(\",\", \"\");\r\n");
      out.write("\r\n");
      out.write("						// 가격이 1억이 넘으면 플래그 값 변경\r\n");
      out.write("						if(val.value > 100000000){\r\n");
      out.write("							flag = true;\r\n");
      out.write("						}\r\n");
      out.write("\r\n");
      out.write("						return false;\r\n");
      out.write("					}\r\n");
      out.write("				});\r\n");
      out.write("\r\n");
      out.write("				// 가격이 1억이 넘으면 경고창\r\n");
      out.write("				if(flag){\r\n");
      out.write("					alert(\"가격은 1억을 넘길 수 없습니다.\");\r\n");
      out.write("					return false;\r\n");
      out.write("				}\r\n");
      out.write("\r\n");
      out.write("				// 로딩 화면 출력 설정\r\n");
      out.write("				$(\"body\").css({ \"overflow-y\" : \"hidden\" });\r\n");
      out.write("				$(\".full-screen\").show();\r\n");
      out.write("				\r\n");
      out.write("			},\r\n");
      out.write("			success : function(response, statusText){\r\n");
      out.write("				// 로그인하지 않았을 때\r\n");
      out.write("				if(response.NoHaveSession){\r\n");
      out.write("					alert(\"로그인 후 이용할 수 있는 서비스입니다.\");\r\n");
      out.write("					link(\"/\");\r\n");
      out.write("				}\r\n");
      out.write("\r\n");
      out.write("				// 파일이 업로드 되지 않았을 때\r\n");
      out.write("				if(response.NoHaveFiles){\r\n");
      out.write("					alert(\"파일이 전송되지 않았습니다.\");\r\n");
      out.write("					return false;\r\n");
      out.write("				}\r\n");
      out.write("\r\n");
      out.write("				// 글 작성이 성공됬을 때\r\n");
      out.write("				if(response.WriteSuccess){\r\n");
      out.write("					alert(\"게시글 작성이 완료되었습니다.\");\r\n");
      out.write("					link(\"/\");\r\n");
      out.write("				}\r\n");
      out.write("			},\r\n");
      out.write("			error : function(jqXHR){\r\n");
      out.write("				console.log(jqXHR.responseText);\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		// 썸네일 영역 리셋\r\n");
      out.write("		function resetDropzone(){\r\n");
      out.write("			// 썸네일 영역에 이미지 개수\r\n");
      out.write("			var fileList = $(\".fileList\").children().find(\"img\").length;\r\n");
      out.write("\r\n");
      out.write("			// 썸네일 영역에 이미지가 하나라도 있으면 안내 문구 제거\r\n");
      out.write("			if(fileList > 0){\r\n");
      out.write("				$(\".dropzone-text\").hide();\r\n");
      out.write("				$(\"#dropzone\").css({ \"padding\" : \"0\" });\r\n");
      out.write("			} else {\r\n");
      out.write("				$(\".dropzone-text\").show();\r\n");
      out.write("				$(\"#dropzone\").css({ \"padding\" : \"5rem 0\" });\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 이미지 썸네일\r\n");
      out.write("		function imageThumbnail(fileList){\r\n");
      out.write("			flag = false;\r\n");
      out.write("\r\n");
      out.write("			var fileListLength = fileList.length;\r\n");
      out.write("			\r\n");
      out.write("			$(fileList).each(function(key, file){\r\n");
      out.write("				var fileName = file.name;\r\n");
      out.write("				var fileType = file.type;\r\n");
      out.write("				var fileSizeList = { \"B\" : file.size, \"KB\" : file.size / 1024, \"MB\" : file.size / 1024 / 1024 };\r\n");
      out.write("				var fileSizeTxt = \"\";\r\n");
      out.write("				\r\n");
      out.write("				$.each(fileSizeList, function(sizeType, sizeValue){\r\n");
      out.write("					if(sizeValue < 1000){\r\n");
      out.write("						fileSizeTxt = sizeValue.toFixed(2) + \" \" + sizeType;\r\n");
      out.write("						return false;\r\n");
      out.write("					}\r\n");
      out.write("				});\r\n");
      out.write("				\r\n");
      out.write("				if(fileType == \"image/jpeg\" || fileType == \"image/png\" || fileType == \"image/bmp\"){\r\n");
      out.write("					var reader = new FileReader();\r\n");
      out.write("\r\n");
      out.write("					// 이미지를 base64로 인코딩하여 문자화 시킴\r\n");
      out.write("					reader.readAsDataURL(file);\r\n");
      out.write("\r\n");
      out.write("					// 선택한 이미지가 보여질때까지 로딩 아이콘 보여짐\r\n");
      out.write("					reader.onloadstart = function(e){\r\n");
      out.write("						flag = false;\r\n");
      out.write("						\r\n");
      out.write("						$(\".spinner\").show();\r\n");
      out.write("					}\r\n");
      out.write("\r\n");
      out.write("					// 이미지를 base64 인코딩이 끝나면 썸네일 이미지 보여짐\r\n");
      out.write("					reader.onload = function(e){\r\n");
      out.write("						// base64로 인코딩 된 데이터\r\n");
      out.write("						src = e.target.result;\r\n");
      out.write("\r\n");
      out.write("						// 썸네일 이미지 생성\r\n");
      out.write("						var html = \"\";\r\n");
      out.write("						var imgHtml = '\\\r\n");
      out.write("							<div class=\"col-md-4 pb-3\">\\\r\n");
      out.write("								<div class=\"card\">\\\r\n");
      out.write("									<div class=\"card-image overflow-hidden\" style=\"height:124px; position:relative;\">\\\r\n");
      out.write("										<img src=\"'+ src +'\" alt=\"' + fileName + '\" title=\"' + fileName +'\" style=\"max-width:100%; height:auto; position:absolute; left:50%; top:50%; transform:translate(-50%, -50%)\" />\\\r\n");
      out.write("									</div>\\\r\n");
      out.write("									<div class=\"card-body text-center p-0 py-2 border-top\">\\\r\n");
      out.write("										<div class=\"card-title fs-12 mb-1\">'+ fileName +'</div>\\\r\n");
      out.write("										<div class=\"card-text fs-12\">' + fileSizeTxt + '</div>\\\r\n");
      out.write("									</div>\\\r\n");
      out.write("								</div>\\\r\n");
      out.write("							</div>';\r\n");
      out.write("						\r\n");
      out.write("						html += imgHtml;\r\n");
      out.write("						$(\".fileList\").append(html);\r\n");
      out.write("					}\r\n");
      out.write("\r\n");
      out.write("					// 썸네일 이미지가 다 보여지면 로딩 아이콘 숨김\r\n");
      out.write("					reader.onloadend = function(e){\r\n");
      out.write("						resetDropzone();\r\n");
      out.write("\r\n");
      out.write("						// 이미지 로딩 끝나면 아이콘 제거\r\n");
      out.write("						if(fileListLength == key + 1){\r\n");
      out.write("							$(\".spinner\").hide();\r\n");
      out.write("						}\r\n");
      out.write("\r\n");
      out.write("						flag = true;\r\n");
      out.write("					}\r\n");
      out.write("\r\n");
      out.write("					reader.error = function(e){\r\n");
      out.write("						console.log(e);\r\n");
      out.write("					}\r\n");
      out.write("				} else {\r\n");
      out.write("					var fileNameArr = fileName.split(\".\");\r\n");
      out.write("					var ext = fileNameArr[fileNameArr.length - 1];\r\n");
      out.write("					\r\n");
      out.write("					flag = false;\r\n");
      out.write("					\r\n");
      out.write("					alert(\"jpg, jpe, jpeg, png, bmp 파일만 업로드할 수 있습니다.\\n\\n현재 업로드하신 확장자 '\" + ext + \"' 는 업로드할 수 없습니다.\");\r\n");
      out.write("					return false;\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/footer.jsp", out, false);
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /WEB-INF/views/board/write.jsp(8,1) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${empty sessionScope.userNo}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("		<script>\r\n");
          out.write("			alert(\"로그인 후 이용할 수 있는 서비스입니다.\");\r\n");
          out.write("			link(\"/\");\r\n");
          out.write("		</script>\r\n");
          out.write("	");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/views/board/write.jsp(39,10) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/board/write.jsp(39,10) '${categoryList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${categoryList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/views/board/write.jsp(39,10) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("category");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("											<option value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${category}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write('>');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${category}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</option>\r\n");
            out.write("										");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }
}
